CHIP Decoder201801673 {
    IN A, B, C, D;
    OUT a,b,c,d,e,f,g;

    PARTS:
    Not(in = A, out = NOTAa);
    Not(in = B, out = NOTBa);
    Not(in = C, out = NOTCa);
    Not(in = D, out = NOTDa);

    And(a = NOTBa, b = NOTDa, out = P1a);
    And(a = C, b = NOTDa, out = P2a);
    And(a = A, b = B, out = P3a);
    And(a = A, b = C, out = P4a);

    Or(a = P1a, b = P2a, out = P12a);
    Or(a = P3a, b = P4a, out = P34a);
    Or(a = P12a, b = P34a, out = g);

    Not(in = A, out = NOTAb);
    Not(in = B, out = NOTBb);
    Not(in = C, out = NOTCb);
    Not(in = D, out = NOTDb);

    And(a = NOTBb, b = NOTDb, out = P1b);
    And(a = NOTBb, b = NOTCb, out = P2b);
    And(a = NOTAb, b = C, out = NOTAcb);
    And(a = NOTAcb, b = D, out = P3b);
    And(a = A, b = NOTCb, out = ANOTCb);
    And(a = ANOTCb, b = D, out = P4b);
    And(a = NOTAb, b = NOTCb, out = NOTACb);
    And(a = NOTACb, b = NOTDb, out = P5b);

    Or(a = P1b, b = P2b, out = ab1);
    Or(a = ab1, b = P3b, out = ab2);
    Or(a = ab2, b = P4b, out = ab3);
    Or(a = ab3, b = P5b, out = g);

    Not(in = A, out = NOTAc);
    Not(in = B, out = NOTBc);
    Not(in = C, out = NOTCc);
    Not(in = D, out = NOTDc);

    And(a = NOTBc, b = NOTDc, out = P1c);
    And(a = B, b = C, out = P2c);
    And(a = A, b = NOTDc, out = P3c);
    And(a = NOTAc, b = C, out = P4c);
    And(a = A, b = NOTBc, out = NOTBac);
    And(a = NOTBac, b = NOTCc, out = P5c);
    And(a = NOTAc, b = B, out = NOTAbc);
    And(a = NOTAbc, b = D, out = P6c);

    Or(a = P1c, b = P2c, out = ca1);
    Or(a = ca1, b = P3c, out = ca2);
    Or(a = ca2, b = P4c, out = ca3);
    Or(a = ca3, b = P5c, out = ca4);
    Or(a = ca4, b = P6c, out = c);

    Not(in = A, out = NOTAd);
    Not(in = B, out = NOTBd);
    Not(in = C, out = NOTCd);
    Not(in = D, out = NOTDd);

    And(a = A, b = NOTBd, out = P1d);
    And(a = NOTCd, b = D, out
